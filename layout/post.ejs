<%- partial('components/article', {item: page, index: false}) %>
<%- partial('components/like-button') %>
<% if (page.toc !== false) { %>
<div class="post-toc">
  <div class="toc-toggle">
    <i class="fas fa-chevron-left"></i>
  </div>
  <div class="post-toc-content">
    <h2>文章目录</h2>
    <%- toc(page.content, {list_number: false}) %>
  </div>
</div>
<script>
document.addEventListener('DOMContentLoaded', function() {
  const tocToggle = document.querySelector('.toc-toggle');
  const postToc = document.querySelector('.post-toc');
  const tocLinks = document.querySelectorAll('.toc-link');
  const headers = document.querySelectorAll('article h1[id], article h2[id], article h3[id], article h4[id], article h5[id], article h6[id]');
  let activeLink = null;
  let isScrolling = false;
  
  // 检测是否是移动设备
  const isMobile = window.matchMedia('(max-width: 768px)').matches;
  
  // 切换目录显示/隐藏
  tocToggle.addEventListener('click', function() {
    postToc.classList.toggle('toc-hidden');
    tocToggle.classList.toggle('toc-toggle-hidden');
    
    // 在移动端，点击后立即应用样式
    if (isMobile) {
      requestAnimationFrame(() => {
        tocToggle.querySelector('i').style.color = postToc.classList.contains('toc-hidden') ? '#F03838' : '';
      });
    }
  });

  // 点击目录项平滑滚动
  tocLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const targetId = decodeURIComponent(link.getAttribute('href')).slice(1);
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        isScrolling = true;
        const offset = 80; // 头部固定导航的高度
        const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - offset;
        
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });

        // 更新激活状态
        if (activeLink) {
          activeLink.classList.remove('active');
        }
        link.classList.add('active');
        activeLink = link;

        // 滚动结束后重置标志
        setTimeout(() => {
          isScrolling = false;
        }, 1000);
      }
    });
  });

  // 滚动时高亮当前目录项
  function updateActiveLink() {
    if (isScrolling) return; // 如果是点击导航引起的滚动，不更新高亮

    let currentSection = '';
    let minDistance = Infinity;
    const scrollPosition = window.scrollY + 100; // 考虑顶部偏移

    headers.forEach(header => {
      const distance = Math.abs(header.getBoundingClientRect().top);
      if (distance < minDistance) {
        minDistance = distance;
        currentSection = '#' + header.id;
      }
    });

    if (activeLink) {
      activeLink.classList.remove('active');
    }
    
    tocLinks.forEach(link => {
      if (decodeURIComponent(link.getAttribute('href')) === currentSection) {
        link.classList.add('active');
        activeLink = link;
        
        // 确保当前项在视图中
        const tocContainer = document.querySelector('.post-toc');
        const linkRect = link.getBoundingClientRect();
        const containerRect = tocContainer.getBoundingClientRect();
        
        if (linkRect.bottom > containerRect.bottom || linkRect.top < containerRect.top) {
          link.scrollIntoView({
            behavior: 'smooth',
            block: 'center',
            inline: 'nearest'
          });
        }
      }
    });
  }

  // 使用 requestAnimationFrame 优化滚动事件
  let ticking = false;
  window.addEventListener('scroll', () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        updateActiveLink();
        ticking = false;
      });
      ticking = true;
    }
  });

  // 初始化高亮
  updateActiveLink();
});
</script>
<% } %>
<% if (theme.mathjax){ %>
    <%- partial('mathjax') %>
<% } %>
<% if (theme.mathjax){ %>
    <%- partial('mathjax') %>
<% } %>